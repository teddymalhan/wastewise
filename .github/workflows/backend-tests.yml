# GitHub Actions Workflow for WasteWise Backend Tests
# This workflow runs tests on push and pull requests

name: Backend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term --cov-fail-under=95

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Generate coverage badge
        if: matrix.python-version == '3.11' && github.event_name == 'push'
        run: |
          echo "Coverage: $(coverage report --precision=2 | grep TOTAL | awk '{print $4}')" >> $GITHUB_STEP_SUMMARY

      - name: Archive coverage HTML report
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/htmlcov/
          retention-days: 30

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 black isort mypy

      - name: Run black (code formatting check)
        working-directory: ./backend
        run: |
          black --check . || echo "Black formatting check failed (non-blocking)"
        continue-on-error: true

      - name: Run isort (import sorting check)
        working-directory: ./backend
        run: |
          isort --check-only . || echo "Import sorting check failed (non-blocking)"
        continue-on-error: true

      - name: Run flake8 (style check)
        working-directory: ./backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 check failed (non-blocking)"
        continue-on-error: true
